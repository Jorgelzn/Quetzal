import logging
import logging.config
import traceback
import sys

################################################
################################################
# Class for UAV logging  
class pLog():
  # Constructor for this logging class
  # output:   the file path where to store the log messages
  # drone_id: the drone identifier (number) 
  def __init__(self, output, drone_id):
    config_root_logger()
    #logging.basicConfig(filename=output, filemode='w', level=logging.INFO)
    self.drone_id = drone_id
      
  # Usual log message
  def info(self, message):
      logging.info(f"{self.drone_id} ðŸ•®  {message}")
  # Successful log message
  def success(self, message):
      global live_actual
      live_actual = f"{self.drone_id} âœ” {message}"
      logging.info(live_actual)
  # Error log message
  def error(self, message):
      global live_actual
      live_actual = f"{self.drone_id} âš  {message}: {traceback.format_exc()}"
      logging.error(live_actual)
  # Task the drone will perform
  def current(self, message):
      global live_actual
      live_actual = f"{self.drone_id} â§– {message}"
      logging.info(live_actual)
  # Run mission log?
  def header(self, message):
      global live_actual
      live_actual = f"{self.drone_id} {message}"
      logging.info(live_actual)

################################################
################################################
# Messages for logging purposes
class m():
  init_run          = "Starting run"
  init_mission      = "Starting mission"
  close             = "Ending mission"
  init_initialize   = "Initializing drone"
  connect_to_airsim = "Connecting with AirSim"
  connect_to_mavsdk = "Connecting with MavSDK"
  mavsdk_healthy    = "MavSDK global_position is ok"
  set_var           = "Setting variables"
  set_initial_point = "Setting initial point"
  drone_arm         = "Arming drone"
  drone_disarm      = "Disarming drone"
  init_offboard     = "Starting offboard mode"
  close_offboard    = "Ending offboard mode"
  shutdown_drone    = "Shutdown drone"
  drone_rtl         = "Returning to home"





#######################################################################
# Init the logger
def config_root_logger(log_file='perThreadLogging.log'):
    formatter = "| %(levelname)-5s"   \
                "| %(asctime)-15s"    \
                "| %(threadName)-11s" \
                "| %(message)s"
    logging.config.dictConfig({
        'version': 1,
        'formatters': {
            'root_formatter': {
            'format': formatter
        }
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'root_formatter'
            },
            'log_file': {
                'class': 'logging.FileHandler',
                'level': 'DEBUG',
                'filename': log_file,
                'formatter': 'root_formatter',
            }
        },
        'loggers': {
            '': {
                'handlers': [
                    #'console', # Shows the log over the console. Compromises the performance
                    'log_file',
                ],
                'level': 'DEBUG',
                'propagate': True
            }
        }
  })


#######################################################################
# Detect and create a string with the exception info. Line number, line and error
import linecache
import sys
def PrintException():
  exc_type, exc_obj, tb = sys.exc_info()
  f = tb.tb_frame
  lineno = tb.tb_lineno
  filename = f.f_code.co_filename
  linecache.checkcache(filename)
  line = linecache.getline(filename, lineno, f.f_globals)
  exceptionLine = 'EXCEPTION IN ('+filename+'\nLINE NUMBER: '+str(lineno)+'\nLINE: '+line.strip()+'\nERROR: '+str(exc_obj)
  return exceptionLine

#######################################################################
# Send a custom string message notification using Telegram
def messageTelegram(message):
    TOKEN   = settings.TELEGRAM_TOKEN        # Token generated by @BotFather
    CHAT_ID = settings.TELEGRAM_CHAT_ID      # chat_id get from https://api.telegram.org/bot_______TOKEN_____/getUpdates
    tb      = telebot.TeleBot(TOKEN)         # Start the Telegram bot handler
    tb.send_message(CHAT_ID, message)        # Send the message